#!/usr/bin/env python
"""
 Copyright (c) 2018 Intel Corporation

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
from __future__ import print_function
import sys
import os
from argparse import ArgumentParser, SUPPRESS
import cv2
import numpy as np
import logging as log
import time
from openvino.inference_engine import IECore

def build_argparser():
    parser = ArgumentParser(add_help=False)
    args = parser.add_argument_group("Options")
    args.add_argument('-h', '--help', action='help', default=SUPPRESS, help='Show this help message and exit.')
    args.add_argument("--d_model", help="Required. Path to an .xml file with a trained model.",
                      required=True, type=str)
    args.add_argument("--r_model", help="Required. Path to an .xml file with a trained model.",
                      required=True, type=str)
    args.add_argument("--image", help="Required. Path to image file.",
                      required=True, type=str)
    args.add_argument("-d", "--device",
                      help="Optional. Specify the target device to infer on; "
                           "CPU, GPU, FPGA or MYRIAD is acceptable. ",
                      default="CPU", type=str)
    args.add_argument("-nt", "--number_top", help="Optional. Number of top results", default=10, type=int)

    return parser


def main():
    args = build_argparser().parse_args()
    log.info("Loading Inference Engines")
    ie = IECore()
    # --------------------------- 1. Read detector IR Generated by ModelOptimizer (.xml and .bin files) ------------
    model_xml = args.d_model
    model_bin = os.path.splitext(model_xml)[0] + ".bin"
    log.info("Loading detector files:\n\t{}\n\t{}".format(model_xml, model_bin))
    d_net = ie.read_network(model=model_xml, weights=model_bin)
    # -----------------------------------------------------------------------------------------------------

    # --------------------------- 2. Read reidentifier IR Generated by ModelOptimizer (.xml and .bin files) ----------
    model_xml = args.r_model
    model_bin = os.path.splitext(model_xml)[0] + ".bin"
    log.info("Loading detector files:\n\t{}\n\t{}".format(model_xml, model_bin))
    r_net = ie.read_network(model=model_xml, weights=model_bin)
    # -----------------------------------------------------------------------------------------------------

    # --------------------------- 3. Read and preprocess input --------------------------------------------

    print("inputs number: " + str(len(d_net.input_info.keys())))

    for input_key in d_net.input_info:
        print("input shape: " + str(d_net.input_info[input_key].input_data.shape))
        print("input key: " + input_key)
        if len(d_net.input_info[input_key].input_data.layout) == 4:
            n, c, h, w = d_net.input_info[input_key].input_data.shape

    print(args.image)
    image = cv2.imread(args.image)
    ih, iw = image.shape[:-1]
    if (ih, iw) != (h, w):
        log.warning("Image {} is resized from {} to {}".format(args.image, image.shape[:-1], (h, w)))
        image = cv2.resize(image, (w, h))
    image = image.transpose((2, 0, 1))  # Change data layout from HWC to CHW
    image = image[None, ...]

    for input_key in d_net.input_info:
        if len(d_net.input_info[input_key].layout) == 4:
            input_name = input_key
            d_net.input_info[input_key].precision = 'U8'


    data = {}
    data[input_name] = image

    # -----------------------------------------------------------------------------------------------------

    # --------------------------- 4. Configure input & output ---------------------------------------------
# --------------------------- Prepare output blobs ----------------------------------------------------
    out_blob = next(iter(d_net.outputs))

    # -----------------------------------------------------------------------------------------------------

    # --------------------------- Performing inference ----------------------------------------------------
    log.info("Loading model to the device")
    exec_net = ie.load_network(network=d_net, device_name=args.device)
    log.info("Creating infer request and starting inference")
    print(image.shape)
    start = time.time()
    res = exec_net.infer(inputs=data)
    print("Prediction time: {}s".format(time.time() - start))
    # -----------------------------------------------------------------------------------------------------

    # --------------------------- Read and postprocess output ---------------------------------------------
    log.info("Processing output blobs")
    res = res[out_blob]
    boxes, classes = {}, {}
    data = res[0][0]
    print(data.shape)
    boxes = []
    for number, proposal in enumerate(data):
        if proposal[2] > 0:
            print(proposal)
            label = np.int(proposal[1])
            confidence = proposal[2]
            xmin = np.int(iw * proposal[3])
            ymin = np.int(ih * proposal[4])
            xmax = np.int(iw * proposal[5])
            ymax = np.int(ih * proposal[6])
            boxes.append([xmin, ymin, xmax, ymax])

    # -----------------------------------------------------------------------------------------------------
    tmp_image = cv2.imread(args.image)
    for box in boxes:
        cv2.rectangle(tmp_image, (box[0], box[1]), (box[2], box[3]), (232, 35, 244), 2)
    cv2.imwrite("out.bmp", tmp_image)

    log.info("Execution successful\n")
    log.info(
        "This sample is an API example, for any performance measurements please use the dedicated benchmark_app tool")


if __name__ == '__main__':
    sys.exit(main() or 0)
